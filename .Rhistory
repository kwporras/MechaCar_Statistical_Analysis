# Technical Analysis
#  1. Download the MechaCar_mpg.csv file, and place it in the active directory for your R session.
#  2. Create a new RScript in your R source pane, name it MechaCarChallenge.RScript, and save it to your active directory.
#  Note: Create a new RScript by going to the File menu. Select "New File," followed by "RScript," or you can click the icon in the top-left corner of the RStudio window. Note that the icon looks like a white square with a plus sign in the top left corner.
#  3. Use the library() function to load the dplyr package.
#import dependencies
library(dplyr)
#  4.  Import and read in the MechaCar_mpg.csv file as a dataframe.
MechaCar_mpg <- read.csv(file='MechaCar_mpg.csv',check.names=F,stringsAsFactors = F)
read?
#  4.  Import and read in the MechaCar_mpg.csv file as a dataframe.
MechaCar_mpg <- read.csv(file='MechaCar_mpg.csv',check.names=F,stringsAsFactors = F)
?read.csv
# Technical Analysis
#  1. Download the MechaCar_mpg.csv file, and place it in the active directory for your R session.
#  2. Create a new RScript in your R source pane, name it MechaCarChallenge.RScript, and save it to your active directory.
#  Note: Create a new RScript by going to the File menu. Select "New File," followed by "RScript," or you can click the icon in the top-left corner of the RStudio window. Note that the icon looks like a white square with a plus sign in the top left corner.
#  3. Use the library() function to load the dplyr package.
#import dependencies
library(dplyr)
#  4.  Import and read in the MechaCar_mpg.csv file as a dataframe.
MechaCar_mpg <- read.csv(file='MechaCar_mpg.csv',check.names=F,stringsAsFactors = F)
#  5. Perform linear regression using the lm() function. In the lm() function, pass in all six variables (i.e., columns), and add the dataframe you created in Step 4 as the data parameter.
?lm
lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data=MechaCar_mpg)
#  6. Using the summary() function, determine the p-value and the r-squared value for the linear regression model.
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data=MechaCar_mpg))
setwd("C:/Users/keyto/git/Modules/Module 15/MechaCar_Statistical_Analysis")
# Technical Analysis
#  1. Download the MechaCar_mpg.csv file, and place it in the active directory for your R session.
#  2. Create a new RScript in your R source pane, name it MechaCarChallenge.RScript, and save it to your active directory.
#  Note: Create a new RScript by going to the File menu. Select "New File," followed by "RScript," or you can click the icon in the top-left corner of the RStudio window. Note that the icon looks like a white square with a plus sign in the top left corner.
#  3. Use the library() function to load the dplyr package.
#import dependencies
library(dplyr)
#  4.  Import and read in the MechaCar_mpg.csv file as a dataframe.
MechaCar_mpg <- read.csv(file='MechaCar_mpg.csv',check.names=F,stringsAsFactors = F)
#  5. Perform linear regression using the lm() function. In the lm() function, pass in all six variables (i.e., columns), and add the dataframe you created in Step 4 as the data parameter.
?lm
lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data=MechaCar_mpg)
#  6. Using the summary() function, determine the p-value and the r-squared value for the linear regression model.
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data=MechaCar_mpg))
# 2. In your MechaCarChallenge.RScript, import and read in the Suspension_Coil.csv file as a table.
Suspension_Coil <- read.csv(file='Suspension_Coil.csv',check.names=F,stringsAsFactors = F)
View(Suspension_Coil)
View(Suspension_Coil)
View(Suspension_Coil)
View(MechaCar_mpg)
View(MechaCar_mpg)
# 3. Write an RScript that creates a total_summary dataframe using the summarize() function to get the mean, median, variance, and standard deviation of the suspension coil's PSI column.
summarize_Suspension_Coil <- Suspension_Coil %>% summarize(Mean=mean(PSI),Median=median(PSI),Variance=(PSI)
# 3. Write an RScript that creates a total_summary dataframe using the summarize() function to get the mean, median, variance, and standard deviation of the suspension coil's PSI column.
summarize_Suspension_Coil <- Suspension_Coil %>% group_by(Manufacturing_Lot) %>% summarize(Mean=mean(PSI),Median=median(PSI),Variance=(PSI)
# 3. Write an RScript that creates a total_summary dataframe using the summarize() function to get the mean, median, variance, and standard deviation of the suspension coil's PSI column.
summarize_Suspension_Coil <- Suspension_Coil %>% group_by(Manufacturing_Lot) %>% summarize(Mean=mean(PSI),Median=median(PSI),Variance=(PSI), .groups = 'keep'
# 3. Write an RScript that creates a total_summary dataframe using the summarize() function to get the mean, median, variance, and standard deviation of the suspension coil's PSI column.
summarize_Suspension_Coil <- Suspension_Coil %>% group_by(Manufacturing_Lot) %>% summarize(Mean=mean(PSI),Median=median(PSI),Variance=(PSI),SD=sd(PSI), .groups = 'keep')
# 3. Write an RScript that creates a total_summary dataframe using the summarize() function to get the mean, median, variance, and standard deviation of the suspension coil's PSI column.
summarize_Suspension_Coil <- Suspension_Coil %>% group_by(Manufacturing_Lot) %>% summarize(Mean=mean(PSI),Median=median(PSI),Variance=variance(PSI),SD=sd(PSI), .groups = 'keep')
# 3. Write an RScript that creates a total_summary dataframe using the summarize() function to get the mean, median, variance, and standard deviation of the suspension coil's PSI column.
summarize_Suspension_Coil <- Suspension_Coil %>% group_by(Manufacturing_Lot) %>% summarize(Mean=mean(PSI),Median=median(PSI),Variance=var(PSI),SD=sd(PSI), .groups = 'keep')
View(summarize_Suspension_Coil)
View(summarize_Suspension_Coil)
# 3. Write an RScript that creates a total_summary dataframe using the summarize() function to get the mean, median, variance, and standard deviation of the suspension coil's PSI column.
total_summary <- Suspension_Coil %>% summarize(Mean=mean(PSI),Median=median(PSI),Variance=var(PSI),SD=sd(PSI), .groups = 'keep')
View(total_summary)
View(total_summary)
# 3. Write an RScript that creates a total_summary dataframe using the summarize() function to get the mean, median, variance, and standard deviation of the suspension coil's PSI column.
total_summary <- Suspension_Coil %>% summarize(Mean=mean(PSI),Median=median(PSI),Variance=var(PSI),SD=sd(PSI))
View(total_summary)
View(total_summary)
View(total_summary)
View(total_summary)
View(Suspension_Coil)
View(Suspension_Coil)
#SAMPLE VERSUS POPULATION DATASET
?sample_n()
population_table <- Suspension_Coil
plt <- ggplot(population_table,aes(x=log10(PSI))) #import dataset into ggplot2
#SAMPLE VERSUS POPULATION DATASET
?sample_n()
population_table <- read.csv(file='Suspension_Coil.csv',check.names=F,stringsAsFactors = F)
plt <- ggplot(population_table,aes(x=log10(PSI))) #import dataset into ggplot2
population_table <- read.csv(file='Suspension_Coil.csv',check.names=F,stringsAsFactors = F)
plt <- ggplot(population_table,aes(x=log10(PSI))) #import dataset into ggplot2
plt <- ggplot(population_table,aes(x=(PSI))) #import dataset into ggplot2
# Technical Analysis
#   1. In your MechaCarChallenge.RScript, write an RScript using the t.test() function to determine if the PSI
#      across all manufacturing lots is statistically different from the population mean of 1,500 pounds per square inch.
?ggplot()
library(tidyverse)
# Technical Analysis
#   1. In your MechaCarChallenge.RScript, write an RScript using the t.test() function to determine if the PSI
#      across all manufacturing lots is statistically different from the population mean of 1,500 pounds per square inch.
?ggplot()
population_table <- read.csv(file='Suspension_Coil.csv',check.names=F,stringsAsFactors = F)
plt <- ggplot(population_table,aes(x=(PSI))) #import dataset into ggplot2
plt + geom_density() #visualize distribution using density plot
population_table <- read.csv(file='Suspension_Coil.csv',check.names=F,stringsAsFactors = F)
plt <- ggplot(population_table,aes(x=log10(PSI))) #import dataset into ggplot2
plt + geom_density() #visualize distribution using density plot
#Create sample dataset
sample_table <- population_table %>% sample_n(50) #randomly sample 50 data points
plt <- ggplot(sample_table,aes(x=log10(Miles_Driven))) #import dataset into ggplot2
plt + geom_density() #visualize distribution using density plot
plt <- ggplot(sample_table,aes(x=log10(PSI))) #import dataset into ggplot2
plt + geom_density() #visualize distribution using density plot
?t.test()
t.test(log10(sample_table$PSI),mu=mean(log10(population_table$PSI))) #compare sample versus population means
sample_table <- population_table %>% sample_n(50) #generate 50 randomly sampled data points
sample_table2 <- population_table %>% sample_n(50) #generate another 50 randomly sampled data points
t.test(log10(sample_table$Miles_Driven),log10(sample_table2$Miles_Driven)) #compare means of two samples
t.test(log10(sample_table$PSI),mu=mean(log10(population_table$PSI))) #compare sample versus population means
sample_table <- population_table %>% sample_n(50) #generate 50 randomly sampled data points
sample_table2 <- population_table %>% sample_n(50) #generate another 50 randomly sampled data points
t.test(log10(sample_table$PSI),log10(sample_table2PSI)) #compare means of two samples
t.test(log10(sample_table$PSI),log10(sample_table2$PSI)) #compare means of two samples
# Technical Analysis
#   1. In your MechaCarChallenge.RScript, write an RScript using the t.test() function to determine if the PSI
#      across all manufacturing lots is statistically different from the population mean of 1,500 pounds per square inch.
?ggplot()
#SAMPLE VERSUS POPULATION DATASET
?sample_n()
population_table <- read.csv(file='Suspension_Coil.csv',check.names=F,stringsAsFactors = F)
plt <- ggplot(population_table,aes(x=(PSI))) #import dataset into ggplot2
plt + geom_density() #visualize distribution using density plot
#Create sample dataset
sample_table <- population_table %>% sample_n(50) #randomly sample 50 data points
plt <- ggplot(sample_table,aes(x=(PSI))) #import dataset into ggplot2
plt + geom_density() #visualize distribution using density plot
?t.test()
t.test((sample_table$PSI),mu=mean((population_table$PSI))) #compare sample versus population means
sample_table <- population_table %>% sample_n(50) #generate 50 randomly sampled data points
sample_table2 <- population_table %>% sample_n(50) #generate another 50 randomly sampled data points
t.test((sample_table$PSI),(sample_table2$PSI)) #compare means of two samples
t.test((sample_table$PSI),mu=mean((population_table$PSI))) #compare sample versus population means
sample_table <- population_table %>% sample_n(50) #generate 50 randomly sampled data points
sample_table2 <- population_table %>% sample_n(50) #generate another 50 randomly sampled data points
t.test((sample_table$PSI),(sample_table2$PSI)) #compare means of two samples
View(sample_table)
View(sample_table)
#Create sample dataset - Lot 1
t.test(subset(sample_table, Manufacturing_Lot == "Lot1"),mu=mean((population_table$PSI))) #compare sample versus population means
#Create sample dataset - Lot 1
t.test(subset(sample_table$PSI, Manufacturing_Lot == "Lot1"),mu=mean((population_table$PSI))) #compare sample versus population means
?t.test()
?t.test()
#Create sample dataset - Lot 1
t.test(sample_table$PSI, subset(Manufacturing_Lot == "Lot1"),mu=mean((population_table$PSI))) #compare sample versus population means
#Create sample dataset - Lot 1
t.test(sample_table$PSI, subset(Manufacturing_Lot == "Lot1"),mu=mean((population_table$PSI))) #compare sample versus population means
#Create sample dataset - Lot 1
t.test(sample_table$PSI, subset=(Manufacturing_Lot == "Lot1"),mu=mean((population_table$PSI))) #compare sample versus population means
#Create sample dataset - Lot 2
t.test(sample_table$PSI, subset=(Manufacturing_Lot == "Lot2"),mu=mean((population_table$PSI))) #compare sample versus population means
#Create sample dataset - Lot 3
t.test(sample_table$PSI, subset=(Manufacturing_Lot == "Lot3"),mu=mean((population_table$PSI))) #compare sample versus population means
#Create sample dataset - Lot 3
t.test(sample_table$PSI, subset=Manufacturing_Lot == "Lot3",mu=mean(population_table$PSI)) #compare sample versus population means
#Create sample dataset - Lot 1
t.test(sample_table$PSI, subset=(Manufacturing_Lot == "Lot1"),mu=mean((population_table$PSI))) #compare sample versus population means
# Technical Analysis
#   1. In your MechaCarChallenge.RScript, write an RScript using the t.test() function to determine if the PSI
#      across all manufacturing lots is statistically different from the population mean of 1,500 pounds per square inch.
t.test(Suspension_Coil$PSI,mu=mean(Suspension_Coil$PSI)) #compare sample versus population means
t.test(Suspension_Coil$PSI, subset(Manufacturing_Lot == "Lot1", mu=mean(Suspension_Coil$PSI)) #compare sample versus population means
t.test(Suspension_Coil$PSI, subset(Suspension_Coil, Manufacturing_Lot == "Lot1"), mu=mean(Suspension_Coil$PSI)) #compare sample versus population means
t.test(Suspension_Coil$PSI %>% subset(Suspension_Coil, Manufacturing_Lot == "Lot1"), mu=mean(Suspension_Coil$PSI)) #compare sample versus population means
#Create sample dataset - Lot 1
lot1 <- subset(Suspension_Coil, Manufacturing_Lot=="Lot1")
t.test(Suspension_Coil$PSI,mu=mean(Suspension_Coil$PSI)) #compare sample versus population means
#Create sample dataset - Lot 2
lot2 <- subset(Suspension_Coil, Manufacturing_Lot=="Lot2")
t.test(Suspension_Coil$PSI,mu=mean(Suspension_Coil$PSI)) #compare sample versus population means
#Create sample dataset - Lot 3
lot3 <- subset(Suspension_Coil, Manufacturing_Lot=="Lot3")
t.test(Suspension_Coil$PSI,mu=mean(Suspension_Coil$PSI)) #compare sample versus population means
#Create sample dataset - Lot 3
lot3 <- subset(Suspension_Coil, Manufacturing_Lot=="Lot3")
t.test(lot3$PSI,mu=mean(Suspension_Coil$PSI)) #compare sample versus population means
# Technical Analysis
#   1. In your MechaCarChallenge.RScript, write an RScript using the t.test() function to determine if the PSI
#      across all manufacturing lots is statistically different from the population mean of 1,500 pounds per square inch.
t.test(Suspension_Coil$PSI,mu=mean(Suspension_Coil$PSI)) #compare sample versus population means
#Create sample dataset - Lot 1
lot1 <- subset(Suspension_Coil, Manufacturing_Lot=="Lot1")
t.test(lot1$PSI,mu=mean(Suspension_Coil$PSI)) #compare sample versus population means
#Create sample dataset - Lot 2
lot2 <- subset(Suspension_Coil, Manufacturing_Lot=="Lot2")
t.test(lot2$PSI,mu=mean(Suspension_Coil$PSI)) #compare sample versus population means
#Create sample dataset - Lot 3
lot3 <- subset(Suspension_Coil, Manufacturing_Lot=="Lot3")
t.test(lot3$PSI,mu=mean(Suspension_Coil$PSI)) #compare sample versus population means
View(MechaCar_mpg)
View(summarize_Suspension_Coil)
View(summarize_Suspension_Coil)
# 3. Write an RScript that creates a total_summary dataframe using the summarize() function to get the mean, median, variance, and standard deviation of the suspension coil's PSI column.
total_summary <- Suspension_Coil %>% summarize(Mean=mean(PSI),Median=median(PSI),Variance=var(PSI),SD=sd(PSI))
# 4. Write an RScript that creates a lot_summary dataframe using the group_by() and the summarize() functions to group each manufacturing lot by the mean, median, variance, and standard deviation of the suspension coil's PSI column.
lot_summary <- Suspension_Coil %>% group_by(Manufacturing_Lot) %>% summarize(Mean=mean(PSI),Median=median(PSI),Variance=var(PSI),SD=sd(PSI), .groups = 'keep')
View(lot_summary)
View(lot_summary)
View(total_summary)
View(total_summary)
View(total_summary)
View(total_summary)
View(total_summary)
View(total_summary)
#Create sample dataset - Lot 1
lot1 <- subset(Suspension_Coil, Manufacturing_Lot=="Lot1")
t.test(lot1$PSI,mu=1500)) #compare sample versus population means
#Create sample dataset - Lot 1
lot1 <- subset(Suspension_Coil, Manufacturing_Lot=="Lot1")
t.test(lot1$PSI,mu=1500) #compare sample versus population means
#Create sample dataset - Lot 2
lot2 <- subset(Suspension_Coil, Manufacturing_Lot=="Lot2")
t.test(lot2$PSI,mu=1500) #compare sample versus population means
#Create sample dataset - Lot 3
lot3 <- subset(Suspension_Coil, Manufacturing_Lot=="Lot3")
t.test(lot3$PSI,mu=1500) #compare sample versus population means
# Technical Analysis
#   1. In your MechaCarChallenge.RScript, write an RScript using the t.test() function to determine if the PSI
#      across all manufacturing lots is statistically different from the population mean of 1,500 pounds per square inch.
t.test(Suspension_Coil$PSI,mu=1500) #compare sample versus population means
